# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Elixir CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    name: Build and test
    runs-on: ubuntu-22.04
    environment: coolify

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: livekit_course_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@61e01a43a562a89bfc54c7f9a378ff67b03e4a21 # v1.16.0
      with:
        elixir-version: '1.18.1' # [Required] Define the Elixir version
        otp-version: '27.1'      # [Required] Define the Erlang/OTP version
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: mix deps.get
    - name: Setup database
      env:
        MIX_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost/livekit_course_test
      run: mix ecto.create && mix ecto.migrate
    - name: Run tests
      env:
        MIX_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost/livekit_course_test
      run: mix test
    - name: Trigger Coolify deploy webhook
      if: ${{ success() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      env:
        COOLIFY_WEBHOOK: ${{ vars.URL_COOLIFY_DEPLOY }}
        COOLIFY_TOKEN: ${{ vars.TOKEN_AUTH_COOLIFY_DEPLOY }}
      run: |
        set -euo pipefail
        if [ -z "${COOLIFY_WEBHOOK:-}" ] || [ -z "${COOLIFY_TOKEN:-}" ]; then
          echo "Secrets absent, skipping deploy trigger." && exit 0
        fi

        attempts=5
        delay=3
        for i in $(seq 1 $attempts); do
          echo "Calling webhook (attempt $i)..."
          http_code=$(curl -sS -o response.json -w "%{http_code}" \
            -H "Authorization: Bearer $COOLIFY_TOKEN" \
            --fail \
            "$COOLIFY_WEBHOOK" || true)

          if [ "${http_code:-000}" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "Webhook success (HTTP $http_code)"
            echo "Response (truncated):"; head -c 400 response.json || true; echo
            exit 0
          fi

          echo "Failed (HTTP ${http_code:-none})."
          if [ "$i" -lt "$attempts" ]; then
            sleep $((delay * i))
          fi
        done
        echo "::error::Webhook failed after $attempts attempts"
        exit 1
